Writing bisulfite genomes out into a single MFA (multi FastA) file

Bisulfite Genome Indexer version v0.20.0 (last modified 26 April 2018)

Step I - Prepare genome folders - completed



Total number of conversions performed:
C->T:	552634544
G->A:	552679784

Step II - Genome bisulfite conversions - completed


Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer
Please be aware that this process can - depending on genome size - take several hours!
Settings:
  Output files: "BS_CT.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.CT_conversion.fa
Settings:
  Output files: "BS_GA.*.bt2"
  Line rate: 6 (line is 64 bytes)
Building a SMALL index
  Lines per side: 1 (side is 64 bytes)
Reading reference sizes
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.GA_conversion.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:18
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time reading reference sizes: 00:00:21
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:11
bmax according to bmaxDivN setting: 663183287
Using parameters --bmax 497387466 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387466 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  Time to join reference sequences: 00:00:12
bmax according to bmaxDivN setting: 663183287
Using parameters --bmax 497387466 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387466 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:01
  Allocating rank array
  Ranking v-sort output
  V-Sorting samples time: 00:01:03
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:14
  Invoking Larsson-Sadakane on ranks
  Ranking v-sort output time: 00:00:15
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:25
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Invoking Larsson-Sadakane on ranks time: 00:00:25
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387465)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387466) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 301290882 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387465)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387466) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 391421389 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:07
Returning block of 301290883 for bucket 1
Getting block 2 of 7
  Reserving size (497387466) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 414674805 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:45
Returning block of 391421390 for bucket 1
Getting block 2 of 7
  Reserving size (497387466) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 451527913 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:57
Returning block of 414674806 for bucket 2
Getting block 3 of 7
  Reserving size (497387466) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 455373675 for bucket 3
  (Using difference cover)
  Sorting block time: 00:03:10
Returning block of 451527914 for bucket 2
Getting block 3 of 7
  Reserving size (497387466) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 460402963 for bucket 3
  (Using difference cover)
  Sorting block time: 00:03:16
Returning block of 455373676 for bucket 3
Getting block 4 of 7
  Reserving size (497387466) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 282429096 for bucket 4
  (Using difference cover)
  Sorting block time: 00:03:14
Returning block of 460402964 for bucket 3
Getting block 4 of 7
  Reserving size (497387466) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  Sorting block time: 00:02:00
Returning block of 282429097 for bucket 4
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 230539120 for bucket 4
  (Using difference cover)
Getting block 5 of 7
  Reserving size (497387466) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 389994143 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:35
Returning block of 230539121 for bucket 4
Getting block 5 of 7
  Reserving size (497387466) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 298686405 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:47
Returning block of 389994144 for bucket 5
Getting block 6 of 7
  Reserving size (497387466) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  Sorting block time: 00:02:03
Returning block of 298686406 for bucket 5
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
Getting block 6 of 7
  Reserving size (497387466) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 100%
  Sorting block of length 393657874 for bucket 6
  (Using difference cover)
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 338467624 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:49
Returning block of 393657875 for bucket 6
Getting block 7 of 7
  Reserving size (497387466) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  Sorting block time: 00:02:21
Returning block of 338467625 for bucket 6
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
Getting block 7 of 7
  Reserving size (497387466) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 60%
  bucket 7: 10%
  bucket 7: 70%
  bucket 7: 20%
  bucket 7: 80%
  bucket 7: 30%
  bucket 7: 90%
  bucket 7: 40%
  bucket 7: 100%
  Sorting block of length 415312667 for bucket 7
  (Using difference cover)
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 481687728 for bucket 7
  (Using difference cover)
  Sorting block time: 00:03:03
Returning block of 415312668 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 773266294
fchr[G]: 773266294
fchr[T]: 1325946078
fchr[$]: 2652733148
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448829 bytes to primary EBWT file: BS_CT.1.bt2.tmp
Wrote 663183292 bytes to secondary EBWT file: BS_CT.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733148
    bwtLen: 2652733149
    sz: 663183287
    bwtSz: 663183288
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795822
    offsSz: 663183288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816319
    numLines: 13816319
    ebwtTotLen: 884244416
    ebwtTotSz: 884244416
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:30:47
Reading reference sizes
  Time reading reference sizes: 00:00:16
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Sorting block time: 00:03:26
Returning block of 481687729 for bucket 7
  Time to join reference sequences: 00:00:10
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 663183287
Using parameters --bmax 497387466 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387466 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1325946078
fchr[G]: 1878580622
fchr[T]: 1878580622
fchr[$]: 2652733148
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448829 bytes to primary EBWT file: BS_GA.1.bt2.tmp
Wrote 663183292 bytes to secondary EBWT file: BS_GA.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733148
    bwtLen: 2652733149
    sz: 663183287
    bwtSz: 663183288
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795822
    offsSz: 663183288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816319
    numLines: 13816319
    ebwtTotLen: 884244416
    ebwtTotSz: 884244416
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:31:33
Reading reference sizes
  Time reading reference sizes: 00:00:15
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:10
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 663183287
Using parameters --bmax 497387466 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387466 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:02
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:14
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:25
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  V-Sorting samples time: 00:01:02
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:14
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:25
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387465)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387466) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 404117905 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387465)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387466) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 369485391 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:53
Returning block of 404117906 for bucket 1
Getting block 2 of 7
  Reserving size (497387466) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 167988281 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:41
Returning block of 369485392 for bucket 1
Getting block 2 of 7
  Reserving size (497387466) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  Sorting block time: 00:01:10
Returning block of 167988282 for bucket 2
  bucket 2: 70%
  bucket 2: 80%
Getting block 3 of 7
  Reserving size (497387466) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 2: 90%
  bucket 3: 10%
  bucket 2: 100%
  Sorting block of length 228233835 for bucket 2
  (Using difference cover)
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 340372650 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:34
Returning block of 228233836 for bucket 2
Getting block 3 of 7
  Reserving size (497387466) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 315781157 for bucket 3
  (Using difference cover)
  Sorting block time: 00:02:21
Returning block of 340372651 for bucket 3
Getting block 4 of 7
  Reserving size (497387466) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 483946887 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:15
Returning block of 315781158 for bucket 3
Getting block 4 of 7
  Reserving size (497387466) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 373254750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:03:23
Returning block of 483946888 for bucket 4
Getting block 5 of 7
  Reserving size (497387466) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  Sorting block time: 00:02:37
Returning block of 373254751 for bucket 4
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
Getting block 5 of 7
  Reserving size (497387466) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 90%
  bucket 5: 10%
  bucket 5: 100%
  Sorting block of length 491687142 for bucket 5
  (Using difference cover)
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 459261626 for bucket 5
  (Using difference cover)
  Sorting block time: 00:03:26
Returning block of 491687143 for bucket 5
Getting block 6 of 7
  Reserving size (497387466) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  Sorting block time: 00:03:19
Returning block of 459261627 for bucket 5
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
Getting block 6 of 7
  Reserving size (497387466) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 80%
  bucket 6: 10%
  bucket 6: 90%
  bucket 6: 20%
  bucket 6: 100%
  Sorting block of length 373897622 for bucket 6
  (Using difference cover)
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 475247885 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:37
Returning block of 373897623 for bucket 6
Getting block 7 of 7
  Reserving size (497387466) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 390722655 for bucket 7
  (Using difference cover)
  Sorting block time: 00:03:24
Returning block of 475247886 for bucket 6
Getting block 7 of 7
  Reserving size (497387466) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 431468498 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:44
Returning block of 390722656 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1325946078
fchr[G]: 1878580622
fchr[T]: 1878580622
fchr[$]: 2652733148
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448829 bytes to primary EBWT file: BS_GA.rev.1.bt2.tmp
Wrote 663183292 bytes to secondary EBWT file: BS_GA.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733148
    bwtLen: 2652733149
    sz: 663183287
    bwtSz: 663183288
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795822
    offsSz: 663183288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816319
    numLines: 13816319
    ebwtTotLen: 884244416
    ebwtTotSz: 884244416
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:30:05
Renaming BS_GA.3.bt2.tmp to BS_GA.3.bt2
Renaming BS_GA.4.bt2.tmp to BS_GA.4.bt2
Renaming BS_GA.1.bt2.tmp to BS_GA.1.bt2
Renaming BS_GA.2.bt2.tmp to BS_GA.2.bt2
Renaming BS_GA.rev.1.bt2.tmp to BS_GA.rev.1.bt2
Renaming BS_GA.rev.2.bt2.tmp to BS_GA.rev.2.bt2
  Sorting block time: 00:03:10
Returning block of 431468499 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 773266294
fchr[G]: 773266294
fchr[T]: 1325946078
fchr[$]: 2652733148
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448829 bytes to primary EBWT file: BS_CT.rev.1.bt2.tmp
Wrote 663183292 bytes to secondary EBWT file: BS_CT.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733148
    bwtLen: 2652733149
    sz: 663183287
    bwtSz: 663183288
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795822
    offsSz: 663183288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816319
    numLines: 13816319
    ebwtTotLen: 884244416
    ebwtTotSz: 884244416
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:32:59
Renaming BS_CT.3.bt2.tmp to BS_CT.3.bt2
Renaming BS_CT.4.bt2.tmp to BS_CT.4.bt2
Renaming BS_CT.1.bt2.tmp to BS_CT.1.bt2
Renaming BS_CT.2.bt2.tmp to BS_CT.2.bt2
Renaming BS_CT.rev.1.bt2.tmp to BS_CT.rev.1.bt2
Renaming BS_CT.rev.2.bt2.tmp to BS_CT.rev.2.bt2
