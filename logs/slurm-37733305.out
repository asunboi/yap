Writing bisulfite genomes out into a single MFA (multi FastA) file

Bisulfite Genome Indexer version v0.20.0 (last modified 26 April 2018)

Step I - Prepare genome folders - completed



Total number of conversions performed:
C->T:	552634621
G->A:	552679894

Step II - Genome bisulfite conversions - completed


Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer
Please be aware that this process can - depending on genome size - take several hours!
Settings:
  Output files: "BS_CT.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.CT_conversion.fa
Building a SMALL index
Reading reference sizes
Settings:
  Output files: "BS_GA.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.GA_conversion.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:24
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time reading reference sizes: 00:00:23
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:14
bmax according to bmaxDivN setting: 663183404
Using parameters --bmax 497387553 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387553 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Time to join reference sequences: 00:00:16
bmax according to bmaxDivN setting: 663183404
Using parameters --bmax 497387553 --dcv 1024
  Doing ahead-of-time memory usage test
  Building sPrimeOrder
  V-Sorting samples
  Passed!  Constructing with these parameters: --bmax 497387553 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:19
  Allocating rank array
  Ranking v-sort output
  V-Sorting samples time: 00:01:20
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387552)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387553) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 301290960 for bucket 1
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Sorting block time: 00:02:44
Returning block of 301290961 for bucket 1
Getting block 2 of 7
  Reserving size (497387553) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 352196602 for bucket 2
  (Using difference cover)
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.78962e+08 (target: 497387552)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (497387553) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 423367173 for bucket 1
  (Using difference cover)
  Sorting block time: 00:03:09
Returning block of 352196603 for bucket 2
Getting block 3 of 7
  Reserving size (497387553) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 417723123 for bucket 3
  (Using difference cover)
  Sorting block time: 00:03:50
Returning block of 423367174 for bucket 1
Getting block 2 of 7
  Reserving size (497387553) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 301322806 for bucket 2
  (Using difference cover)
  Sorting block time: 00:03:50
Returning block of 417723124 for bucket 3
Getting block 4 of 7
  Reserving size (497387553) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  Sorting block time: 00:02:41
Returning block of 301322807 for bucket 2
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
Getting block 3 of 7
  Reserving size (497387553) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 4: 50%
  bucket 3: 10%
  bucket 4: 60%
  bucket 3: 20%
  bucket 4: 70%
  bucket 3: 30%
  bucket 4: 80%
  bucket 3: 40%
  bucket 3: 50%
  bucket 4: 90%
  bucket 3: 60%
  bucket 4: 100%
  Sorting block of length 485914512 for bucket 4
  (Using difference cover)
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 316589867 for bucket 3
  (Using difference cover)
  Sorting block time: 00:02:46
Returning block of 316589868 for bucket 3
Getting block 4 of 7
  Reserving size (497387553) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  Sorting block time: 00:04:22
Returning block of 485914513 for bucket 4
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 472106605 for bucket 4
  (Using difference cover)
Getting block 5 of 7
  Reserving size (497387553) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 346182643 for bucket 5
  (Using difference cover)
  Sorting block time: 00:04:15
Returning block of 472106606 for bucket 4
  Sorting block time: 00:03:08
Returning block of 346182644 for bucket 5
Getting block 5 of 7
  Reserving size (497387553) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
Getting block 6 of 7
  Reserving size (497387553) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 5: 20%
  bucket 6: 10%
  bucket 5: 30%
  bucket 6: 20%
  bucket 5: 40%
  bucket 6: 30%
  bucket 5: 50%
  bucket 6: 40%
  bucket 5: 60%
  bucket 6: 50%
  bucket 5: 70%
  bucket 6: 60%
  bucket 5: 80%
  bucket 6: 70%
  bucket 5: 90%
  bucket 6: 80%
  bucket 5: 100%
  Sorting block of length 444188643 for bucket 5
  (Using difference cover)
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 334113081 for bucket 6
  (Using difference cover)
  Sorting block time: 00:03:04
Returning block of 334113082 for bucket 6
Getting block 7 of 7
  Reserving size (497387553) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  Sorting block time: 00:03:58
Returning block of 444188644 for bucket 5
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 415312689 for bucket 7
  (Using difference cover)
Getting block 6 of 7
  Reserving size (497387553) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 270915049 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:22
Returning block of 270915050 for bucket 6
  Sorting block time: 00:03:54
Returning block of 415312690 for bucket 7
Getting block 7 of 7
  Reserving size (497387553) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 773266456
fchr[G]: 773266456
fchr[T]: 1325946350
fchr[$]: 2652733616
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448991 bytes to primary EBWT file: BS_CT.1.bt2.tmp
Wrote 663183412 bytes to secondary EBWT file: BS_CT.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733616
    bwtLen: 2652733617
    sz: 663183404
    bwtSz: 663183405
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795852
    offsSz: 663183408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816321
    numLines: 13816321
    ebwtTotLen: 884244544
    ebwtTotSz: 884244544
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:39:30
Reading reference sizes
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  Time reading reference sizes: 00:00:21
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  bucket 7: 100%
  Sorting block of length 424243467 for bucket 7
  (Using difference cover)
  Time to join reference sequences: 00:00:14
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 663183404
Using parameters --bmax 497387553 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387553 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:19
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Sorting block time: 00:03:51
Returning block of 424243468 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1325946350
fchr[G]: 1878580971
fchr[T]: 1878580971
fchr[$]: 2652733616
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448991 bytes to primary EBWT file: BS_GA.1.bt2.tmp
Wrote 663183412 bytes to secondary EBWT file: BS_GA.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733616
    bwtLen: 2652733617
    sz: 663183404
    bwtSz: 663183405
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795852
    offsSz: 663183408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816321
    numLines: 13816321
    ebwtTotLen: 884244544
    ebwtTotSz: 884244544
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:44:13
Reading reference sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 4.42122e+08 (target: 497387552)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (497387553) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  Time reading reference sizes: 00:00:20
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  Time to join reference sequences: 00:00:15
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 663183404
Using parameters --bmax 497387553 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 497387553 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 472224338 for bucket 1
  (Using difference cover)
  V-Sorting samples time: 00:01:19
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 5; iterating...
  Sorting block time: 00:04:23
Returning block of 472224339 for bucket 1
Getting block 2 of 6
  Reserving size (497387553) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.31592e+08 (target: 497387552)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (497387553) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 2: 100%
  Sorting block of length 360385980 for bucket 2
  (Using difference cover)
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 433118442 for bucket 1
  (Using difference cover)
  Sorting block time: 00:03:16
Returning block of 360385981 for bucket 2
Getting block 3 of 6
  Reserving size (497387553) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  Sorting block time: 00:03:56
Returning block of 433118443 for bucket 1
  bucket 3: 100%
  Sorting block of length 473370346 for bucket 3
  (Using difference cover)
Getting block 2 of 8
  Reserving size (497387553) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 322759273 for bucket 2
  (Using difference cover)
  Sorting block time: 00:04:17
Returning block of 473370347 for bucket 3
  Sorting block time: 00:02:54
Returning block of 322759274 for bucket 2
Getting block 3 of 8
  Reserving size (497387553) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
Getting block 4 of 6
  Reserving size (497387553) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 3: 20%
  bucket 4: 10%
  bucket 3: 30%
  bucket 4: 20%
  bucket 3: 40%
  bucket 4: 30%
  bucket 3: 50%
  bucket 4: 40%
  bucket 3: 60%
  bucket 4: 50%
  bucket 3: 70%
  bucket 3: 80%
  bucket 4: 60%
  bucket 3: 90%
  bucket 4: 70%
  bucket 3: 100%
  Sorting block of length 449793326 for bucket 3
  (Using difference cover)
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 487982572 for bucket 4
  (Using difference cover)
  Sorting block time: 00:04:00
Returning block of 449793327 for bucket 3
Getting block 4 of 8
  Reserving size (497387553) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  Sorting block time: 00:04:28
Returning block of 487982573 for bucket 4
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
Getting block 5 of 6
  Reserving size (497387553) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 4: 80%
  bucket 5: 10%
  bucket 4: 90%
  bucket 5: 20%
  bucket 4: 100%
  Sorting block of length 354540826 for bucket 4
  (Using difference cover)
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 428694090 for bucket 5
  (Using difference cover)
  Sorting block time: 00:03:07
Returning block of 354540827 for bucket 4
Getting block 5 of 8
  Reserving size (497387553) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 257512950 for bucket 5
  (Using difference cover)
  Sorting block time: 00:03:56
Returning block of 428694091 for bucket 5
Getting block 6 of 6
  Reserving size (497387553) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 430076285 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:16
Returning block of 257512951 for bucket 5
Getting block 6 of 8
  Reserving size (497387553) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 254207800 for bucket 6
  (Using difference cover)
  Sorting block time: 00:04:00
Returning block of 430076286 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 773266456
fchr[G]: 773266456
fchr[T]: 1325946350
fchr[$]: 2652733616
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448991 bytes to primary EBWT file: BS_CT.rev.1.bt2.tmp
Wrote 663183412 bytes to secondary EBWT file: BS_CT.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733616
    bwtLen: 2652733617
    sz: 663183404
    bwtSz: 663183405
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795852
    offsSz: 663183408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816321
    numLines: 13816321
    ebwtTotLen: 884244544
    ebwtTotSz: 884244544
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:38:42
Renaming BS_CT.3.bt2.tmp to BS_CT.3.bt2
Renaming BS_CT.4.bt2.tmp to BS_CT.4.bt2
Renaming BS_CT.1.bt2.tmp to BS_CT.1.bt2
Renaming BS_CT.2.bt2.tmp to BS_CT.2.bt2
Renaming BS_CT.rev.1.bt2.tmp to BS_CT.rev.1.bt2
Renaming BS_CT.rev.2.bt2.tmp to BS_CT.rev.2.bt2
  Sorting block time: 00:02:17
Returning block of 254207801 for bucket 6
Getting block 7 of 8
  Reserving size (497387553) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 339480116 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:59
Returning block of 339480117 for bucket 7
Getting block 8 of 8
  Reserving size (497387553) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 241320876 for bucket 8
  (Using difference cover)
  Sorting block time: 00:02:11
Returning block of 241320877 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1325946350
fchr[G]: 1878580971
fchr[T]: 1878580971
fchr[$]: 2652733616
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 888448991 bytes to primary EBWT file: BS_GA.rev.1.bt2.tmp
Wrote 663183412 bytes to secondary EBWT file: BS_GA.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2652733616
    bwtLen: 2652733617
    sz: 663183404
    bwtSz: 663183405
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165795852
    offsSz: 663183408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13816321
    numLines: 13816321
    ebwtTotLen: 884244544
    ebwtTotSz: 884244544
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:42:16
Renaming BS_GA.3.bt2.tmp to BS_GA.3.bt2
Renaming BS_GA.4.bt2.tmp to BS_GA.4.bt2
Renaming BS_GA.1.bt2.tmp to BS_GA.1.bt2
Renaming BS_GA.2.bt2.tmp to BS_GA.2.bt2
Renaming BS_GA.rev.1.bt2.tmp to BS_GA.rev.1.bt2
Renaming BS_GA.rev.2.bt2.tmp to BS_GA.rev.2.bt2
